{"version":3,"sources":["services/GetDate.tsx","components/Clock.tsx","services/RandomName.tsx","App.tsx","index.tsx"],"names":["getDate","Date","toUTCString","slice","Clock","state","today","timerIdForClock","this","window","setInterval","setState","console","info","clearInterval","className","React","PureComponent","getRandomName","value","now","toString","App","hasClock","clockName","timerId","handleRightClick","event","preventDefault","handleLeftClick","handleKeyDown","key","_prevProps","prevState","debug","onContextMenu","onClick","onKeyDown","role","tabIndex","ReactDOM","render","document","getElementById"],"mappings":"6MAAO,SAASA,IAGd,OAFa,IAAIC,MAELC,cAAcC,OAAO,IAAK,G,WCK3BC,EAAb,4MACEC,MAAe,CACbC,MAAON,IACPO,gBAAiB,GAHrB,uDAME,WAA2B,IAAD,OACxBC,KAAKH,MAAME,gBAAkBE,OAAOC,aAAY,WAC9C,EAAKC,SAAS,CAAEL,MAAON,MAEvBY,QAAQC,KAAR,UAAgB,EAAKR,MAAMC,UAC1B,OAXP,kCAcE,WACEG,OAAOK,cAAcN,KAAKH,MAAME,mBAfpC,oBAkBE,WACE,IAAQD,EAAUE,KAAKH,MAAfC,MAER,OACE,sBAAMS,UAAU,cAAhB,SACGT,QAvBT,GAA2BU,IAAMC,eCR1B,SAASC,IACd,IAAMC,EAAQlB,KAAKmB,MAAMC,WAAWlB,OAAO,GAE3C,MAAM,SAAN,OAAgBgB,GCOX,IAAMG,EAAb,4MACEjB,MAAe,CACbkB,UAAU,EACVC,UAAW,WAHf,EAMEC,QAAU,EANZ,EA4BEC,iBAAmB,SAACC,GAClBA,EAAMC,iBACN,EAAKjB,SAAS,CAAEY,UAAU,IAC1Bd,OAAOK,cAAc,EAAKW,UA/B9B,EAkCEI,gBAAkB,SAACF,GACjBA,EAAMC,iBACN,EAAKjB,SAAS,CAAEY,UAAU,KApC9B,EAuCEO,cAAgB,SAACH,GACG,UAAdA,EAAMI,KACR,EAAKpB,SAAS,CAAEY,UAAU,IAGV,MAAdI,EAAMI,KACR,EAAKpB,SAAS,CAAEY,UAAU,KA7ChC,uDAQE,WAA2B,IAAD,OACxBf,KAAKiB,QAAUhB,OAAOC,aAAY,WAChC,EAAKC,SAAS,CAAEa,UAAWN,QAC1B,QAXP,gCAcE,SACEc,EACAC,GAEIA,EAAUT,YAAchB,KAAKH,MAAMmB,WAErCZ,QAAQsB,MAAR,uBAA8BD,EAAUT,UAAxC,eAAwDhB,KAAKH,MAAMmB,cApBzE,kCAwBE,WACEf,OAAOK,cAAcN,KAAKiB,WAzB9B,oBAiDE,WACE,MAAgCjB,KAAKH,MAA7BkB,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,UAElB,OACE,sBACET,UAAU,MACVoB,cAAe3B,KAAKkB,iBACpBU,QAAS5B,KAAKqB,gBACdQ,UAAW7B,KAAKsB,cAChBQ,KAAK,SACLC,SAAU,EANZ,UAQE,6CAEChB,EACC,sBAAKR,UAAU,QAAf,UACE,wBAAQA,UAAU,cAAlB,SACGS,IAGF,YAED,cAAC,EAAD,OAGF,YA1EV,GAAyBR,IAAMC,eCP/BuB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.da895dba.chunk.js","sourcesContent":["export function getDate(): string {\n  const date = new Date();\n\n  return date.toUTCString().slice(-12, -4);\n}\n","import React from 'react';\nimport { getDate } from '../services/GetDate';\n\ntype State = {\n  today: string,\n  timerIdForClock: number,\n};\n\nexport class Clock extends React.PureComponent<{}, State> {\n  state: State = {\n    today: getDate(),\n    timerIdForClock: 0,\n  };\n\n  componentDidMount(): void {\n    this.state.timerIdForClock = window.setInterval(() => {\n      this.setState({ today: getDate() });\n      // eslint-disable-next-line no-console\n      console.info(`${this.state.today}`);\n    }, 1000);\n  }\n\n  componentWillUnmount(): void {\n    window.clearInterval(this.state.timerIdForClock);\n  }\n\n  render() {\n    const { today } = this.state;\n\n    return (\n      <span className=\"Clock__time\">\n        {today}\n      </span>\n    );\n  }\n}\n\n/*\n\nimport React from 'react';\nimport { getRandomName } from '../services/RandomName';\n\ntype State = {\n  today: Date,\n  startName: string;\n  endName: string,\n  timerIdForClock: number,\n  timerIdForName: number,\n  // timerId: number,\n};\n\nexport class Clock extends React.PureComponent<{}, State> {\n  state: State = {\n    today: new Date(),\n    startName: '',\n    endName: 'Clock-0',\n    timerIdForClock: 0,\n    timerIdForName: 0,\n    // timerId: 0,\n  };\n\n  componentDidMount(): void {\n    this.state.timerIdForClock = window.setInterval(() => {\n      this.setState({ today: new Date() });\n      // eslint-disable-next-line no-console\n      console.info(this.state.today.toUTCString().slice(-12, -4));\n    }, 1000);\n\n    this.state.timerIdForName = window.setInterval(() => {\n      this.setState(prevState => ({ startName: prevState.endName }));\n      this.setState({ endName: getRandomName() });\n\n      // eslint-disable-next-line no-console\n      console.info(`Renamed from ${this.state.startName} to ${this.state.endName}`);\n    }, 3300);\n\n    // eslint-disable-next-line no-console\n    console.info('ShowClock');\n  }\n\n  componentWillUnmount(): void {\n    window.clearInterval(this.state.timerIdForClock);\n    window.clearInterval(this.state.timerIdForName);\n    // eslint-disable-next-line no-console\n    console.info('HideClock');\n  }\n\n  render() {\n    const { today, endName } = this.state;\n\n    return (\n      <div className=\"Clock\">\n        <strong className=\"Clock__name\">\n          {endName}\n        </strong>\n\n        {' time is '}\n\n        <span className=\"Clock__time\">\n          {today.toUTCString().slice(-12, -4)}\n        </span>\n      </div>\n    );\n  }\n}\n\n*/\n","export function getRandomName(): string {\n  const value = Date.now().toString().slice(-4);\n\n  return `Clock-${value}`;\n}\n","import React from 'react';\nimport './App.scss';\nimport { Clock } from './components/Clock';\nimport { getRandomName } from './services/RandomName';\n\ntype State = {\n  hasClock: boolean,\n  clockName: string,\n};\n\nexport class App extends React.PureComponent<{}, State> {\n  state: State = {\n    hasClock: true,\n    clockName: 'Clock-0',\n  };\n\n  timerId = 0;\n\n  componentDidMount(): void {\n    this.timerId = window.setInterval(() => {\n      this.setState({ clockName: getRandomName() });\n    }, 3300);\n  }\n\n  componentDidUpdate(\n    _prevProps: Readonly<{}>,\n    prevState: Readonly<State>,\n  ): void {\n    if (prevState.clockName !== this.state.clockName) {\n      // eslint-disable-next-line no-console\n      console.debug(`Renamed from ${prevState.clockName} to ${this.state.clockName}`);\n    }\n  }\n\n  componentWillUnmount(): void {\n    window.clearInterval(this.timerId);\n  }\n\n  handleRightClick = (event: React.MouseEvent) => {\n    event.preventDefault();\n    this.setState({ hasClock: false });\n    window.clearInterval(this.timerId);\n  };\n\n  handleLeftClick = (event: React.MouseEvent) => {\n    event.preventDefault();\n    this.setState({ hasClock: true });\n  };\n\n  handleKeyDown = (event: React.KeyboardEvent) => {\n    if (event.key === 'Enter') {\n      this.setState({ hasClock: true });\n    }\n\n    if (event.key === ' ') {\n      this.setState({ hasClock: false });\n    }\n  };\n\n  render() {\n    const { hasClock, clockName } = this.state;\n\n    return (\n      <div\n        className=\"App\"\n        onContextMenu={this.handleRightClick}\n        onClick={this.handleLeftClick}\n        onKeyDown={this.handleKeyDown}\n        role=\"button\"\n        tabIndex={0}\n      >\n        <h1>React clock</h1>\n\n        {hasClock ? (\n          <div className=\"Clock\">\n            <strong className=\"Clock__name\">\n              {clockName}\n            </strong>\n\n            {' time is '}\n\n            <Clock />\n          </div>\n        ) : (\n          null\n        )}\n      </div>\n    );\n  }\n}\n\n/*\ncomponentDidMount(): void {\n    this.state.timerIdForName = window.setInterval(() => {\n      this.setState(prevState => ({ oldName: prevState.newName }));\n      this.setState({ newName: getRandomName() });\n\n      // eslint-disable-next-line no-console\n      console.info(`Renamed from ${this.state.oldName} to ${this.state.newName}`);\n    }, 3300);\n  }\n\n*/\n\n/*\nimport React from 'react';\nimport './App.scss';\nimport { Clock } from './components/Clock';\n\ntype State = {\n  hasClock: boolean,\n};\n\nexport class App extends React.PureComponent<{}, State> {\n  state: State = {\n    hasClock: true,\n  };\n\n  handleRightClick = (event: React.MouseEvent) => {\n    event.preventDefault();\n    this.setState({ hasClock: false });\n  };\n\n  handleLeftClick = (event: React.MouseEvent) => {\n    event.preventDefault();\n    this.setState({ hasClock: true });\n  };\n\n  handleKeyDown = (event: React.KeyboardEvent) => {\n    if (event.key === 'Enter') {\n      this.setState({ hasClock: true });\n    }\n\n    if (event.key === ' ') {\n      this.setState({ hasClock: false });\n    }\n  };\n\n  render() {\n    const { hasClock } = this.state;\n\n    return (\n      <div\n        className=\"App\"\n        onContextMenu={this.handleRightClick}\n        onClick={this.handleLeftClick}\n        onKeyDown={this.handleKeyDown}\n        role=\"button\"\n        tabIndex={0}\n      >\n        <h1>React clock</h1>\n\n        {hasClock ? (\n          <Clock />\n        ) : (\n          null\n        )}\n      </div>\n    );\n  }\n}\n*/\n\n/*\n  handleLeftClick = document.addEventListener(\n    'click',\n    () => this.setState({ hasClock: true }),\n  );\n*/\n\n/*\n      return (\n      <div\n        className=\"App\"\n        onContextMenu={(e) => {\n          e.preventDefault();\n          this.setState({ hasClock: false })\n        }}\n        onClick={() => this.setState({ hasClock: true })}\n      >\n        <h1>React clock</h1>\n\n        {hasClock ? (\n          <Clock name={clockName} />\n        ) : (\n          null\n        )}\n      </div>\n    );\n\n  */\n\n/*\nimport React from 'react';\nimport './App.scss';\nimport { Clock } from './components/Clock';\n\ntype State = {\n  hasClock: boolean,\n};\n\nexport class App extends React.PureComponent<{}, State> {\n  state: State = {\n    hasClock: true,\n  };\n\n  handleRightClick = document.addEventListener(\n    'contextmenu',\n    (event: React.MouseEvent) => {\n      event.preventDefault();\n      this.setState({ hasClock: false });\n    },\n  );\n\n  handleLeftClick = document.addEventListener(\n    'click',\n    (event: React.MouseEvent) => {\n      event.preventDefault();\n      this.setState({ hasClock: true });\n    },\n  );\n\n  render() {\n    const { hasClock } = this.state;\n\n    return (\n      <div\n        className=\"App\"\n        onContextMenu={this.handleRightClick}\n        onClick={this.handleLeftClick}\n        onKeyDown={this.handleKeyDown}\n        role=\"button\"\n        tabIndex={0}\n      >\n        <h1>React clock</h1>\n\n        {hasClock ? (\n          <Clock />\n        ) : (\n          null\n        )}\n      </div>\n    );\n  }\n}\n*/\n\n// componentDidMount(): void {\n//   this.state.timerIdForName = window.setInterval(() => {\n//     this.setState({ newName: getRandomName() });\n// }\n\n// componentDidUpdate(prevState: Readonly<State>): void {\n//   this.state.timerIdForName = window.setInterval(() => {\n//     this.setState({ newName: getRandomName() });\n//   }, 3300);\n\n//   if (prevState.oldName !== this.state.newName) {\n//     this.setState({ oldName: prevState.newName });\n//   }\n\n//   // eslint-disable-next-line no-console\n//   console.debug(`Renamed from ${this.state.oldName} to ${this.state.newName}`);\n// }\n\n// componentDidUpdate(prevState: Readonly<State>): void {\n//   this.state.timerIdForName = window.setInterval(() => {\n//     this.setState(prevState => ({ oldName: prevState.newName }));\n//     this.setState({ newName: getRandomName() });\n\n//     // eslint-disable-next-line no-console\n//     console.info(`Renamed from ${this.state.oldName} to ${this.state.newName}`);\n//   }, 3300);\n// }\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}